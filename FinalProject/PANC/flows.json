[
    {
        "id": "3aa11aca5785f243",
        "type": "tab",
        "label": "Project",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "240e9a9e551a34aa",
        "type": "mqtt out",
        "z": "3aa11aca5785f243",
        "name": "",
        "topic": "polimi/project-p7a",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d5cd849f1b93b2ca",
        "x": 1110,
        "y": 620,
        "wires": []
    },
    {
        "id": "c9ef83cfa2615807",
        "type": "inject",
        "z": "3aa11aca5785f243",
        "name": "",
        "props": [
            {
                "p": "payload.Type",
                "v": "BEACON",
                "vt": "str"
            },
            {
                "p": "payload.SlotDuration",
                "v": "0.5",
                "vt": "num"
            },
            {
                "p": "payload.CAPSlots",
                "v": "2",
                "vt": "num"
            },
            {
                "p": "payload.CFPReservation",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "payload.BI",
                "v": "30",
                "vt": "num"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 630,
        "y": 620,
        "wires": [
            [
                "ea5784fd0d48dbef"
            ]
        ]
    },
    {
        "id": "442e06b936ec15d4",
        "type": "mqtt in",
        "z": "3aa11aca5785f243",
        "name": "",
        "topic": "polimi/project-p7a",
        "qos": "0",
        "datatype": "json",
        "broker": "d5cd849f1b93b2ca",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 650,
        "y": 760,
        "wires": [
            [
                "15f60d1f5ae537ca",
                "5852a4d293f06fe0"
            ]
        ]
    },
    {
        "id": "15f60d1f5ae537ca",
        "type": "function",
        "z": "3aa11aca5785f243",
        "name": "function 1",
        "func": "// on messsage check type\n\n// if it is a register message add it to the client's queue (if not already done before) \nif(msg.payload.Type == \"REGISTER\"){\n    console.log(\"[PANC]: Request to register by client ID \" + msg.payload.From)\n    let queue = flow.get(\"clientsQueue\");\n    if(!queue.includes(msg.payload.From)){\n        queue = queue.concat(msg.payload.From);\n        console.log('[PANC]: Added client ID '+msg.payload.From)\n    }else{\n        console.log('[PANC]: Not adding node, already registered!')\n    }\n    flow.set(\"clientsQueue\", queue);\n}else if(msg.payload.Type == \"DATA\"){\n    // Log the message sniffed\n    console.log('[PANC]: Sniffed data message:')\n    console.log(msg.payload);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "//initialize the queue\nif (flow.get(\"clientsQueue\") == undefined) {\n    flow.set(\"clientsQueue\", []);\n    console.log(\"init\")\n}",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 760,
        "wires": [
            [
                "949264a9bcef77b7"
            ]
        ]
    },
    {
        "id": "ea5784fd0d48dbef",
        "type": "function",
        "z": "3aa11aca5785f243",
        "name": "function 2",
        "func": "/* The queue is handled in the following way:\n// We take a slot from the CAP, and we \"move\" it in the CFP part,\n// Until when CAP is 1 slot: at that point we cannot\n// move that remaining slot, otherwise new eventual nodes will\n// not be able to send request to join. At that point,\n// we cycle over clients in a round robin way\n*/\nlet queue = flow.get(\"clientsQueue\");\nlet CFPnumber = 0\nconsole.log(\"[PANC]: ------SENDING BEACON------\")\nlet SleepNumber = (msg.payload.BI / msg.payload.SlotDuration) - 1 - msg.payload.CAPSlots;\nif(queue.length != 0){\n    console.log(\"[PANC]: clients' IDs connected: \" + queue);\n    let res = [];\n    CFPnumber = Math.min(queue.length, SleepNumber) // minus one, because one needs to be free\n    for (let i = 0; i < CFPnumber; i++){\n        let el = queue.shift();\n        res = res.concat(el);\n        queue = queue.concat(el);\n    }\n    SleepNumber = SleepNumber - res.length\n    flow.set(\"clientsQueue\", queue);\n    res.sort();\n    console.log(\"[PANC]: CFP schedule of client's IDs this Beacon Interval: \" + res);\n    msg.payload.CFPReservation = JSON.stringify(res);\n}else{\n    console.log(\"[PANC]: clients' IDs connected: NONE\");\n}\nconsole.log(\"[PANC]: Number of slots in CAP for this Beacon Interval: \" + msg.payload.CAPSlots);\nconsole.log(\"[PANC]: Number of slots in CFP for this Beacon Interval: \" + CFPnumber);\nconsole.log(\"[PANC]: Number of slots in Sleep for this Beacon Interval: \" + SleepNumber);\nlet dutyCycle = ((msg.payload.CAPSlots + CFPnumber + 1)*msg.payload.SlotDuration)/msg.payload.BI;\nconsole.log(\"[PANC]: The duty cycle of this Beacon Interval is \"+ dutyCycle)\nconsole.log(\"[PANC]: The BI lasts: \" + msg.payload.BI + \" seconds\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "//initialize the queue\nflow.set(\"clientsQueue\", []);\nconsole.log(\"[PANC]: Clients Queue Initialized\")",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 620,
        "wires": [
            [
                "240e9a9e551a34aa",
                "6a85ee4cca5b70ac"
            ]
        ]
    },
    {
        "id": "5852a4d293f06fe0",
        "type": "debug",
        "z": "3aa11aca5785f243",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 880,
        "wires": []
    },
    {
        "id": "949264a9bcef77b7",
        "type": "debug",
        "z": "3aa11aca5785f243",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 820,
        "wires": []
    },
    {
        "id": "6a85ee4cca5b70ac",
        "type": "debug",
        "z": "3aa11aca5785f243",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 520,
        "wires": []
    },
    {
        "id": "d5cd849f1b93b2ca",
        "type": "mqtt-broker",
        "name": "dashboard",
        "broker": "broker.mqttdashboard.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]